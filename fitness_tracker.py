# -*- coding: utf-8 -*-
"""Fitness Tracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ufYjfz3JW2Pzj5DhI4KkFPYY6ohjmRJF
"""

#pip install streamlit pandas scikit-learn joblib

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV

import os
#print(os.listdir('/content'))

# Load datasets
daily_activity = pd.read_csv("dailyActivity_merged.csv")
daily_calories = pd.read_csv("dailyCalories_merged.csv")
heart_rate = pd.read_csv("heartrate_seconds_merged.csv")

# Merging necessary data
fitness_data = pd.merge(daily_activity, daily_calories, on='Id')
fitness_data.rename(columns={'Calories_x': 'Calories'}, inplace=True)
fitness_data.drop(columns=['Calories_y', 'TrackerDistance', 'LoggedActivitiesDistance', 'ActivityDate'], inplace=True)

# Handling missing values
fitness_data.dropna(inplace=True)

daily_activity.head()

heart_rate.head()

fitness_data.head()

fitness_data.head()

# Feature Selection
X = fitness_data[['TotalSteps', 'TotalDistance', 'VeryActiveMinutes', 'FairlyActiveMinutes', 'LightlyActiveMinutes', 'SedentaryMinutes']]
y = fitness_data['Calories']

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scaling features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

X_test.head()

y_test.head()

# Hyperparameter tuning for RandomForestRegressor
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10]
}
grid_search = GridSearchCV(RandomForestRegressor(random_state=42), param_grid, cv=3, scoring='r2', n_jobs=-1)
grid_search.fit(X_train_scaled, y_train)
rf_best = grid_search.best_estimator_

# Trying GradientBoostingRegressor for comparison
#gbr = GradientBoostingRegressor(n_estimators=200, learning_rate=0.1, max_depth=5, random_state=42)
#gbr.fit(X_train_scaled, y_train)

# Predictions
rf_pred = rf_best.predict(X_test_scaled)
#gbr_pred = gbr.predict(X_test_scaled)

# Evaluation
rf_mae = mean_absolute_error(y_test, rf_pred)
rf_mse = mean_squared_error(y_test, rf_pred)
rf_r2 = r2_score(y_test, rf_pred)

#gbr_mae = mean_absolute_error(y_test, gbr_pred)
#gbr_mse = mean_squared_error(y_test, gbr_pred)
#gbr_r2 = r2_score(y_test, gbr_pred)

print("Random Forest Model Performance:")
print(f'MAE: {rf_mae}, MSE: {rf_mse}, R^2: {rf_r2}')

#print("\nGradient Boosting Model Performance:")
#print(f'MAE: {gbr_mae}, MSE: {gbr_mse}, R^2: {gbr_r2}')

# Plotting Actual vs. Predicted values
plt.figure(figsize=(8, 5))
sns.scatterplot(x=y_test, y=rf_pred, label="Random Forest")
plt.xlabel("Actual Calories")
plt.ylabel("Predicted Calories")
plt.title("Actual vs Predicted Calories Burnt")
plt.legend()
plt.show()

import joblib

# Save the trained model
joblib.dump(rf_best, 'random_forest_model.pkl')

# Load the model
rf_loaded = joblib.load('random_forest_model.pkl')

# Use the loaded model for predictions
predictions = rf_loaded.predict(X_test_scaled)

print(predictions)

import joblib
import numpy as np

# Load the saved model
rf_model = joblib.load('random_forest_model.pkl')

# Take user input for each feature
print("Enter values for the following features:")
feature_values = []
feature_names = ['TotalSteps', 'TotalDistance', 'VeryActiveMinutes', 'FairlyActiveMinutes', 'LightlyActiveMinutes', 'SedentaryMinutes']  # Replace with actual feature names

for feature in feature_names:
    value = float(input(f"{feature}: "))
    feature_values.append(value)

# Convert input to NumPy array and reshape for prediction
user_input = np.array(feature_values).reshape(1, -1)

# Make prediction
prediction = rf_model.predict(user_input)
print(f"Predicted Value: {prediction[0]}")
